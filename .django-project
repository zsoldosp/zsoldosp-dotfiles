export MANAGE_PY=/path/to/manage_py
export DJANGO_CONFIG=settings
export DJANGO_TEST_COMMAND=test
export DJANGO_PROJECT="no project"

# TODO: how to get the chroot to work
#[play] peter@ubuntu$ echo $OLD_PS1
#\[\e]0;\u@\h: \w\a\]${debian_chroot:+($debian_chroot)}\u@\h:\w\$

export OLD_PS1=$PS1
export PS1='[$(echo $DJANGO_PROJECT) - $(echo $DJANGO_CONFIG)] \[\e]0;\u@\h: \w\a\]\u@\h\$ ' # thanks to @grault

function pypath_update_for_settings() {
    echo import os
    echo import sys
    echo "PROJECT_ROOT = os.path.dirname(os.path.abspath(__file__))"
    echo "sys.path.append(os.path.join(PROJECT_ROOT, '..', 'site-packages'))"
    echo "sys.path.append(PROJECT_ROOT)"
}

function pypath_update_for_manage_py() {
    echo import os
    echo import sys
    echo "PROJECT_ROOT = os.path.dirname(os.path.abspath(__file__))"
    echo "sys.path.append(PROJECT_ROOT)"
}

function new_django_project() {
    proj_name=$1
    if [[ $proj_name == '' ]]; then
        echo 'project name not provided' >&2
        return 1
    fi
    proj_folder=~/$proj_name
    mkdir -p $proj_folder
    git init $proj_folder
    site_packages=$proj_folder/site-packages
    mkdir $site_packages
    ln -s ~/django-1.3 $site_packages/django
    export PYTHONPATH=$site_packages
    old_dir=`pwd`
    cd $proj_name
    $site_packages/django/bin/django-admin.py startproject $proj_name
    cd $proj_name
    mkdir settings
    touch settings/__init__.py
    (pypath_update_for_settings; cat settings.py) > settings/base.py
    echo "from settings.base import *" > settings/devel.py
    echo "from settings.devel import *" > settings/devel_test.py
    rm settings.py
    (pypath_update_for_manage_py; cat manage.py) > manage.py.tmp
    mv manage.py.tmp manage.py
    cd ..
    project_profile_file=`pwd`/.project_profile
    echo "export MANAGE_PY=$proj_folder/$proj_name/manage.py" > $project_profile_file
    echo "export DJANGO_CONFIG=settings.devel" >> $project_profile_file
    echo "export DJANGO_PROJECT=$proj_name"  >> $project_profile_file
    git add . $project_profile_file
    git commit -m"skeleton django project created for ${proj_name}"
    cd $old_dir
    source $project_profile_file
    ln -fs $project_profile_file ~/.current-django-project
}

function manage_py_test() {
        test_config=${DJANGO_CONFIG}_test
        verify_valid_django_config_name && python $MANAGE_PY $DJANGO_TEST_COMMAND $* --settings=${test_config} 2>&1 | tee test.log
}
function manage_py() {
        verify_valid_django_config_name && python $MANAGE_PY $* --settings=${DJANGO_CONFIG}
}

function shell_plus() {
    manage_py shell_plus $*
}

function runscript() {
    manage_py runscript $* --traceback
}

function runserver() {
    manage_py runserver 0.0.0.0:8080 $*
}
function verify_valid_django_config_name() {
    settings_file_path=`dirname $MANAGE_PY`/${DJANGO_CONFIG}
    settings_file_path=`echo $settings_file_path | sed 's/\\./\\//g'`.py
    test -f $settings_file_path
    exit_code=$?
    if [[ 0 -ne $exit_code ]]; then 
        echo "Non-existent config file (${settings_file_path})" >&2
    fi
    return $exit_code
}
