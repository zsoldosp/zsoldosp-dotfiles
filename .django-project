export MANAGE_PY=/path/to/manage_py
export DJANGO_CONFIG=settings
export DJANGO_TEST_COMMAND=test
export DJANGO_PROJECT="no project"

# TODO: change currnet project helper method - validate the is a .django settings file, and update symlink, and disallow illegal values
# TODO: how to get the chroot to work
#[play] peter@ubuntu$ echo $OLD_PS1
#\[\e]0;\u@\h: \w\a\]${debian_chroot:+($debian_chroot)}\u@\h:\w\$

export OLD_PS1=$PS1
export PS1='[$(echo $DJANGO_PROJECT) - $(echo $DJANGO_CONFIG)] \[\e]0;\u@\h: \w\a\]\u@\h\$ ' # thanks to @grault

function pypath_update_for_settings() {
    echo import os
    echo import sys
    echo "PROJECT_ROOT = os.path.join(os.path.dirname(os.path.abspath(__file__)), '..')"
    echo "sys.path.append(os.path.join(PROJECT_ROOT, '..', 'site-packages'))"
    echo "sys.path.append(PROJECT_ROOT)"
}

function pypath_update_for_manage_py() {
    echo import os
    echo import sys
    echo "PROJECT_ROOT = os.path.dirname(os.path.abspath(__file__))"
    echo "sys.path.append(os.path.join(PROJECT_ROOT, '..', 'site-packages'))"
    echo "sys.path.append(PROJECT_ROOT)"
}

function new_django_project() {
    # TODO: error handling, e.g.: clean up when fails for invalid project name, e.g.: django-formstesting
    proj_name=$1
    if [[ $proj_name == '' ]]; then
        echo 'project name not provided' >&2
        return 1
    fi
    proj_folder=~/$proj_name
    mkdir -p $proj_folder
    git init $proj_folder
    site_packages=$proj_folder/site-packages
    mkdir $site_packages
    ln -s ~/django-1.3 $site_packages/django
    old_dir=`pwd`
    cd $proj_name
    PYTHONPATH=$site_packages $site_packages/django/bin/django-admin.py startproject $proj_name
    cd $proj_name
    mkdir settings
    touch settings/__init__.py
    (pypath_update_for_settings; cat settings.py) > settings/base.py
    echo "from settings.base import *" > settings/devel.py
    echo "from settings.devel import *" > settings/devel_test.py
    rm settings.py
    (pypath_update_for_manage_py; cat manage.py) > manage.py.tmp
    mv manage.py.tmp manage.py
    cd ..
    project_profile_file=`pwd`/.project_profile
    echo "export MANAGE_PY=$proj_folder/$proj_name/manage.py" > $project_profile_file
    echo "export DJANGO_CONFIG=settings.devel" >> $project_profile_file
    echo "export DJANGO_PROJECT=$proj_name"  >> $project_profile_file
    git add . $project_profile_file
    git commit -m"skeleton django project created for ${proj_name}"
    cd $old_dir
    source $project_profile_file
    ln -fs $project_profile_file ~/.current-django-project
}

function manage_py_test() {
        test_config=${DJANGO_CONFIG}_test
        verify_valid_django_config_name && python $MANAGE_PY $DJANGO_TEST_COMMAND $* --settings=${test_config} 2>&1 | tee test.log
}

function manage_py_test_failed_ones_only(){
    # TODO: if a test prints (bad practice, but can happen) such a line , it fails.: ERROR: Failed to transform Recod <RecordType(PK=101077)> with the data 'some data here': Object matching query does not exist.

    # last set to clean newlines comes from http://www.removelinebreaks.com/information/about/remove_with_sed
    if [ ! -f test.log ]
    then
        echo 'no previous test file, exiting'
        return
    fi
    testcases=`cat test.log | grep "^\(ERROR\|FAIL\):" | sed "s/^\S\+ \(test\S\+\) ([^.]\+\.\([^.]\+\).*\.\(\S\+\))\s*$/\2.\3.\1/"`
    echo $testcases | wc | grep "[0-9]" | while read line word char; do
        echo $line $word $char
        if [[ "$word" == "0" ]]; then
            echo 'no failed tests. You can $> cp test.log.bkp test.log'
            testcases=""
        elif [[ "$line" != "1" ]]; then
            testcases=`echo $testcases | sed -n -e ":a" -e "$ s/\n/ /gp;N;b a"`
        fi
    done
    if [[ "$testcases" != "" ]]; then
        cp test.log test.log.bkp # in case 
        manage_py_test $testcases
    fi
}
function manage_py() {
        verify_valid_django_config_name && python $MANAGE_PY $* --settings=${DJANGO_CONFIG}
}

function shell_plus() {
    manage_py shell_plus $*
}

function runscript() {
    manage_py runscript $* --traceback
}

function runserver() {
    manage_py runserver 0.0.0.0:8080 $*
}

function update_settings_file_variable() {
    DJANGO_CONFIG_FILE=`dirname $MANAGE_PY`/${DJANGO_CONFIG}
    export DJANGO_CONFIG_FILE=`echo $DJANGO_CONFIG_FILE | sed 's/\\./\\//g'`.py
}
function verify_valid_django_config_name() {
    test -f $DJANGO_CONFIG_FILE
    exit_code=$?
    if [[ 0 -ne $exit_code ]]; then 
        echo "Non-existent config file (${DJANGO_CONFIG_FILE})" >&2
    fi
    return $exit_code
}

function django-initdb() {
    (echo yes; echo `whoami`; echo `whoami`@`whoami`.com; echo `whoami`; echo `whoami`) | manage_py syncdb
}
